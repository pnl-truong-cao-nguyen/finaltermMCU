CCS PCM C Compiler, Version 5.112, 5967               30-Jan-23 15:25

               Filename:   D:\OneDrive - The University of Technology\documents_pnl\DUT\dai_hoc_nam_3\HocKy1\kiThuatViDieuKhien\finaltermMCU\PICC\main.lst

               ROM used:   192 words (2%)
                           Largest free fragment is 2048
               RAM used:   23 (6%) at main() level
                           27 (7%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   095
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   02F
.................... #include <main.h>
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
*
0067:  MOVF   34,W
0068:  CLRF   78
0069:  SUBWF  33,W
006A:  BTFSC  03.0
006B:  GOTO   06F
006C:  MOVF   33,W
006D:  MOVWF  77
006E:  GOTO   07B
006F:  CLRF   77
0070:  MOVLW  08
0071:  MOVWF  35
0072:  RLF    33,F
0073:  RLF    77,F
0074:  MOVF   34,W
0075:  SUBWF  77,W
0076:  BTFSC  03.0
0077:  MOVWF  77
0078:  RLF    78,F
0079:  DECFSZ 35,F
007A:  GOTO   072
007B:  RETURN
.................... 
.................... #list
.................... 
.................... #include <DEF_16F877A.h>
.................... /**
....................   ******************************************************************************
....................   * Ten Tep      :        DEF_16F877A.h
....................   * Tac Gia      :        Nguyen Quy Nhat
....................   * Cong Ty      :        MinhHaGroup
....................   * Website      :        BanLinhKien.Vn
....................   * Phien Ban    :        V1.0.0
....................   * Ngay         :        31-08-2012
....................   * Tom Tat      :        Khai bao, dinh nghia mot so thah ghi cho PIC16F877A
....................   *           
....................   *
....................   ******************************************************************************
....................   * Chu Y      :          
....................   *                          
....................   *                      
....................   ******************************************************************************
....................   */
.................... #ifndef __DEF_16F877A_H
.................... #define __DEF_16F877A_H
.................... #byte PORTA           = 0x05
.................... #byte PORTB           = 0x06
.................... #byte PORTC           = 0x07
.................... #byte PORTD           = 0x08
.................... #byte PORTE           = 0x09
.................... #byte PINA            = 0x05
.................... #byte PINB            = 0x06
.................... #byte PINC            = 0x07
.................... #byte PIND            = 0x08
.................... #byte PINE            = 0x09
.................... //Thanh Ghi Huong
.................... #byte DDRA            = 0x85
.................... #byte DDRB            = 0x86
.................... #byte DDRC            = 0x87
.................... #byte DDRD            = 0x88
.................... #byte DDRE            = 0x89
.................... /*********************PORTA**********************/
.................... #bit PORTA_5          = PORTA.5
.................... #bit PORTA_4          = PORTA.4
.................... #bit PORTA_3          = PORTA.3
.................... #bit PORTA_2          = PORTA.2
.................... #bit PORTA_1          = PORTA.1
.................... #bit PORTA_0          = PORTA.0
.................... #bit PINA_0           = PINA.0
.................... #bit PINA_1           = PINA.1
.................... #bit PINA_2           = PINA.2
.................... #bit PINA_3           = PINA.3
.................... #bit PINA_4           = PINA.4
.................... #bit PINA_5           = PINA.5
.................... #bit DDRA_0           = DDRA.0
.................... #bit DDRA_1           = DDRA.1
.................... #bit DDRA_2           = DDRA.2
.................... #bit DDRA_3           = DDRA.3
.................... #bit DDRA_4           = DDRA.4
.................... /*********************PORTB**********************/
.................... #bit PORTB_7          = PORTB.7
.................... #bit PORTB_6          = PORTB.6
.................... #bit PORTB_5          = PORTB.5
.................... #bit PORTB_4          = PORTB.4
.................... #bit PORTB_3          = PORTB.3
.................... #bit PORTB_2          = PORTB.2
.................... #bit PORTB_1          = PORTB.1
.................... #bit PORTB_0          = PORTB.0
.................... #bit PINB_7           = PINB.7
.................... #bit PINB_6           = PINB.6
.................... #bit PINB_5           = PINB.5
.................... #bit PINB_4           = PINB.4
.................... #bit PINB_3           = PINB.3
.................... #bit PINB_2           = PINB.2
.................... #bit PINB_1           = PINB.1
.................... #bit PINB_0           = PINB.0
.................... #bit DDRB_0           = DDRB.0
.................... #bit DDRB_1           = DDRB.1
.................... #bit DDRB_2           = DDRB.2
.................... #bit DDRB_3           = DDRB.3
.................... #bit DDRB_4           = DDRB.4
.................... #bit DDRB_5           = DDRB.5
.................... #bit DDRB_6           = DDRB.6
.................... #bit DDRB_7           = DDRB.7
.................... /*********************PORTC**********************/
.................... #bit PORTC_7          = PORTC.7
.................... #bit PORTC_6          = PORTC.6
.................... #bit PORTC_5          = PORTC.5
.................... #bit PORTC_4          = PORTC.4
.................... #bit PORTC_3          = PORTC.3
.................... #bit PORTC_2          = PORTC.2
.................... #bit PORTC_1          = PORTC.1
.................... #bit PORTC_0          = PORTC.0
.................... #bit PINC_7           = PINC.7
.................... #bit PINC_6           = PINC.6
.................... #bit PINC_5           = PINC.5
.................... #bit PINC_4           = PINC.4
.................... #bit PINC_3           = PINC.3
.................... #bit PINC_2           = PINC.2
.................... #bit PINC_1           = PINC.1
.................... #bit PINC_0           = PINC.0
.................... #bit DDRC_0           = DDRC.0
.................... #bit DDRC_1           = DDRC.1
.................... #bit DDRC_2           = DDRC.2
.................... #bit DDRC_3           = DDRC.3
.................... #bit DDRC_4           = DDRC.4
.................... #bit DDRC_5           = DDRC.5
.................... #bit DDRC_6           = DDRC.6
.................... #bit DDRC_7           = DDRC.7
.................... /*********************PORTD**********************/
.................... #bit PORTD_7          = PORTD.7
.................... #bit PORTD_6          = PORTD.6
.................... #bit PORTD_5          = PORTD.5
.................... #bit PORTD_4          = PORTD.4
.................... #bit PORTD_3          = PORTD.3
.................... #bit PORTD_2          = PORTD.2
.................... #bit PORTD_1          = PORTD.1
.................... #bit PORTD_0          = PORTD.0
.................... #bit PIND_7           = PIND.7
.................... #bit PIND_6           = PIND.6
.................... #bit PIND_5           = PIND.5
.................... #bit PIND_4           = PIND.4
.................... #bit PIND_3           = PIND.3
.................... #bit PIND_2           = PIND.2
.................... #bit PIND_1           = PIND.1
.................... #bit PIND_0           = PIND.0
.................... #bit DDRD_0           = DDRD.0
.................... #bit DDRD_1           = DDRD.1
.................... #bit DDRD_2           = DDRD.2
.................... #bit DDRD_3           = DDRD.3
.................... #bit DDRD_4           = DDRD.4
.................... #bit DDRD_5           = DDRD.5
.................... #bit DDRD_6           = DDRD.6
.................... #bit DDRD_7           = DDRD.7
.................... /*********************PORTE**********************/
.................... #bit PORTE_2          = PORTE.2
.................... #bit PORTE_1          = PORTE.1
.................... #bit PORTE_0          = PORTE.0
.................... #bit PINE_2           = PINE.2
.................... #bit PINE_1           = PINE.1
.................... #bit PINE_0           = PINE.0
.................... #bit DDRE_0           = DDRE.0
.................... #bit DDRE_1           = DDRE.1
.................... #bit DDRE_2           = DDRE.2
.................... #ifndef DDR_OUT
....................     #define DDR_OUT     0
.................... #endif
.................... #ifndef DDR_IN
....................     #define DDR_IN      1
.................... #endif
.................... #endif
.................... /******************************KET THUC FILE******************************
.................... ______________________________NGUYEN QUY NHAT______________________________*/
.................... 
.................... 
.................... #device ADC=10
.................... #use delay(crystal=20000000)
.................... #fuses NOWDT, HS, NOLVP, NOPUT, NOPROTECT, NODEBUG, NOBROWNOUT, NOCPD, NOWRT
.................... 
.................... 
.................... 
.................... unsigned int8 seg7ledca[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
*
00A1:  MOVLW  C0
00A2:  BCF    03.5
00A3:  MOVWF  27
00A4:  MOVLW  F9
00A5:  MOVWF  28
00A6:  MOVLW  A4
00A7:  MOVWF  29
00A8:  MOVLW  B0
00A9:  MOVWF  2A
00AA:  MOVLW  99
00AB:  MOVWF  2B
00AC:  MOVLW  92
00AD:  MOVWF  2C
00AE:  MOVLW  82
00AF:  MOVWF  2D
00B0:  MOVLW  F8
00B1:  MOVWF  2E
00B2:  MOVLW  80
00B3:  MOVWF  2F
00B4:  MOVLW  90
00B5:  MOVWF  30
.................... 
.................... unsigned int8 n = 0;
.................... void init_pin(void)
.................... {
....................    DDRB_1 = 0;
*
003C:  BSF    03.5
003D:  BCF    06.1
....................    DDRB_2 = 0;
003E:  BCF    06.2
....................    DDRB_3 = 0;
003F:  BCF    06.3
....................    DDRB_4 = 0;
0040:  BCF    06.4
....................    DDRC = 0x00;
0041:  CLRF   07
....................    DDRD = 0x00;
0042:  CLRF   08
0043:  BCF    03.5
0044:  BCF    0A.3
0045:  BCF    0A.4
0046:  GOTO   0B7 (RETURN)
.................... }
.................... 
.................... void init_int_ext(void);
.................... 
.................... #INT_EXT
.................... void _int_ext(void)
.................... {
....................    clear_interrupt(INT_EXT);
*
002F:  BCF    0B.1
....................    disable_interrupts(GLOBAL);
0030:  BCF    0B.6
0031:  BCF    0B.7
0032:  BTFSC  0B.7
0033:  GOTO   031
....................    //begin interrupt external program
....................    n++;
0034:  INCF   31,F
....................    PORTB_4 = 1;
0035:  BSF    06.4
....................    //end interrupt external program
....................    enable_interrupts(GLOBAL);
0036:  MOVLW  C0
0037:  IORWF  0B,F
0038:  BCF    0B.1
0039:  BCF    0A.3
003A:  BCF    0A.4
003B:  GOTO   01B
.................... }
.................... 
.................... void people(unsigned int8 n);
.................... 
.................... void display_on_seg7led(unsigned int8 n);
.................... 
.................... void main()
*
0095:  MOVF   03,W
0096:  ANDLW  1F
0097:  MOVWF  03
0098:  CLRF   31
0099:  BSF    03.5
009A:  BSF    1F.0
009B:  BSF    1F.1
009C:  BSF    1F.2
009D:  BCF    1F.3
009E:  MOVLW  07
009F:  MOVWF  1C
00A0:  BCF    03.7
.................... {
....................    init_pin();
*
00B6:  GOTO   03C
....................    init_int_ext();
00B7:  GOTO   047
....................    
....................    while(TRUE)
....................    {
....................       people(n);
00B8:  MOVF   31,W
00B9:  MOVWF  32
00BA:  GOTO   051
....................       display_on_seg7led(n);
00BB:  MOVF   31,W
00BC:  MOVWF  32
00BD:  GOTO   07C
00BE:  GOTO   0B8
....................    }
.................... 
.................... }
.................... 
00BF:  SLEEP
.................... void init_int_ext(void)
.................... {
....................    DDRB_0 = 1;
*
0047:  BSF    03.5
0048:  BSF    06.0
....................    ext_int_edge(L_TO_H);
0049:  BSF    01.6
....................    enable_interrupts(INT_EXT);
004A:  BCF    03.5
004B:  BSF    0B.4
....................    enable_interrupts(GLOBAL);
004C:  MOVLW  C0
004D:  IORWF  0B,F
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   0B8 (RETURN)
.................... }
.................... 
.................... void people(unsigned int8 n)
.................... {
....................    if(n < 10)
0051:  MOVF   32,W
0052:  SUBLW  09
0053:  BTFSS  03.0
0054:  GOTO   059
....................    {
....................       PORTB_1 = 1;
0055:  BSF    06.1
....................       PORTB_2 = 0;
0056:  BCF    06.2
....................       PORTB_3 = 0;
0057:  BCF    06.3
....................    }
0058:  GOTO   064
....................    else if(n < 20)
0059:  MOVF   32,W
005A:  SUBLW  13
005B:  BTFSS  03.0
005C:  GOTO   061
....................    {
....................       PORTB_1 = 0;
005D:  BCF    06.1
....................       PORTB_2 = 1;
005E:  BSF    06.2
....................       PORTB_3 = 0;
005F:  BCF    06.3
....................    }
0060:  GOTO   064
....................    else
....................    {
....................       PORTB_1 = 0;
0061:  BCF    06.1
....................       PORTB_2 = 0;
0062:  BCF    06.2
....................       PORTB_3 = 1;
0063:  BSF    06.3
....................    }
0064:  BCF    0A.3
0065:  BCF    0A.4
0066:  GOTO   0BB (RETURN)
.................... }
.................... 
.................... void display_on_seg7led(unsigned int8 n)
.................... {
....................    PORTC = seg7ledca[n/10];
*
007C:  MOVF   32,W
007D:  MOVWF  33
007E:  MOVLW  0A
007F:  MOVWF  34
0080:  CALL   067
0081:  MOVLW  27
0082:  ADDWF  78,W
0083:  MOVWF  04
0084:  BCF    03.7
0085:  MOVF   00,W
0086:  MOVWF  07
....................    PORTD = seg7ledca[n%10];
0087:  MOVF   32,W
0088:  MOVWF  33
0089:  MOVLW  0A
008A:  MOVWF  34
008B:  CALL   067
008C:  MOVLW  27
008D:  ADDWF  77,W
008E:  MOVWF  04
008F:  BCF    03.7
0090:  MOVF   00,W
0091:  MOVWF  08
0092:  BCF    0A.3
0093:  BCF    0A.4
0094:  GOTO   0BE (RETURN)
.................... }

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
