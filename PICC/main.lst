CCS PCM C Compiler, Version 5.112, 5967               31-Jan-23 22:28

               Filename:   D:\OneDrive - The University of Technology\documents_pnl\DUT\dai_hoc_nam_3\HocKy1\kiThuatViDieuKhien\finaltermMCU\PICC\main.lst

               ROM used:   301 words (4%)
                           Largest free fragment is 2048
               RAM used:   23 (6%) at main() level
                           29 (8%) worst case
               Stack used: 2 locations (0 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0F8
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   030
001B:  BTFSS  0B.5
001C:  GOTO   01F
001D:  BTFSC  0B.2
001E:  GOTO   033
001F:  MOVF   22,W
0020:  MOVWF  04
0021:  MOVF   23,W
0022:  MOVWF  77
0023:  MOVF   24,W
0024:  MOVWF  78
0025:  MOVF   25,W
0026:  MOVWF  79
0027:  MOVF   26,W
0028:  MOVWF  7A
0029:  MOVF   20,W
002A:  MOVWF  0A
002B:  SWAPF  21,W
002C:  MOVWF  03
002D:  SWAPF  7F,F
002E:  SWAPF  7F,W
002F:  RETFIE
0030:  BCF    0A.3
0031:  BCF    0A.4
0032:  GOTO   04A
0033:  BCF    0A.3
0034:  BCF    0A.4
0035:  GOTO   058
.................... #include <main.h>
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
*
00CA:  MOVF   34,W
00CB:  CLRF   78
00CC:  SUBWF  33,W
00CD:  BTFSC  03.0
00CE:  GOTO   0D2
00CF:  MOVF   33,W
00D0:  MOVWF  77
00D1:  GOTO   0DE
00D2:  CLRF   77
00D3:  MOVLW  08
00D4:  MOVWF  35
00D5:  RLF    33,F
00D6:  RLF    77,F
00D7:  MOVF   34,W
00D8:  SUBWF  77,W
00D9:  BTFSC  03.0
00DA:  MOVWF  77
00DB:  RLF    78,F
00DC:  DECFSZ 35,F
00DD:  GOTO   0D5
00DE:  RETURN
.................... 
.................... #list
.................... 
.................... #include <DEF_16F877A.h>
.................... /**
....................   ******************************************************************************
....................   * Ten Tep      :        DEF_16F877A.h
....................   * Tac Gia      :        Nguyen Quy Nhat
....................   * Cong Ty      :        MinhHaGroup
....................   * Website      :        BanLinhKien.Vn
....................   * Phien Ban    :        V1.0.0
....................   * Ngay         :        31-08-2012
....................   * Tom Tat      :        Khai bao, dinh nghia mot so thah ghi cho PIC16F877A
....................   *           
....................   *
....................   ******************************************************************************
....................   * Chu Y      :          
....................   *                          
....................   *                      
....................   ******************************************************************************
....................   */
.................... #ifndef __DEF_16F877A_H
.................... #define __DEF_16F877A_H
.................... #byte PORTA           = 0x05
.................... #byte PORTB           = 0x06
.................... #byte PORTC           = 0x07
.................... #byte PORTD           = 0x08
.................... #byte PORTE           = 0x09
.................... #byte PINA            = 0x05
.................... #byte PINB            = 0x06
.................... #byte PINC            = 0x07
.................... #byte PIND            = 0x08
.................... #byte PINE            = 0x09
.................... //Thanh Ghi Huong
.................... #byte DDRA            = 0x85
.................... #byte DDRB            = 0x86
.................... #byte DDRC            = 0x87
.................... #byte DDRD            = 0x88
.................... #byte DDRE            = 0x89
.................... /*********************PORTA**********************/
.................... #bit PORTA_5          = PORTA.5
.................... #bit PORTA_4          = PORTA.4
.................... #bit PORTA_3          = PORTA.3
.................... #bit PORTA_2          = PORTA.2
.................... #bit PORTA_1          = PORTA.1
.................... #bit PORTA_0          = PORTA.0
.................... #bit PINA_0           = PINA.0
.................... #bit PINA_1           = PINA.1
.................... #bit PINA_2           = PINA.2
.................... #bit PINA_3           = PINA.3
.................... #bit PINA_4           = PINA.4
.................... #bit PINA_5           = PINA.5
.................... #bit DDRA_0           = DDRA.0
.................... #bit DDRA_1           = DDRA.1
.................... #bit DDRA_2           = DDRA.2
.................... #bit DDRA_3           = DDRA.3
.................... #bit DDRA_4           = DDRA.4
.................... /*********************PORTB**********************/
.................... #bit PORTB_7          = PORTB.7
.................... #bit PORTB_6          = PORTB.6
.................... #bit PORTB_5          = PORTB.5
.................... #bit PORTB_4          = PORTB.4
.................... #bit PORTB_3          = PORTB.3
.................... #bit PORTB_2          = PORTB.2
.................... #bit PORTB_1          = PORTB.1
.................... #bit PORTB_0          = PORTB.0
.................... #bit PINB_7           = PINB.7
.................... #bit PINB_6           = PINB.6
.................... #bit PINB_5           = PINB.5
.................... #bit PINB_4           = PINB.4
.................... #bit PINB_3           = PINB.3
.................... #bit PINB_2           = PINB.2
.................... #bit PINB_1           = PINB.1
.................... #bit PINB_0           = PINB.0
.................... #bit DDRB_0           = DDRB.0
.................... #bit DDRB_1           = DDRB.1
.................... #bit DDRB_2           = DDRB.2
.................... #bit DDRB_3           = DDRB.3
.................... #bit DDRB_4           = DDRB.4
.................... #bit DDRB_5           = DDRB.5
.................... #bit DDRB_6           = DDRB.6
.................... #bit DDRB_7           = DDRB.7
.................... /*********************PORTC**********************/
.................... #bit PORTC_7          = PORTC.7
.................... #bit PORTC_6          = PORTC.6
.................... #bit PORTC_5          = PORTC.5
.................... #bit PORTC_4          = PORTC.4
.................... #bit PORTC_3          = PORTC.3
.................... #bit PORTC_2          = PORTC.2
.................... #bit PORTC_1          = PORTC.1
.................... #bit PORTC_0          = PORTC.0
.................... #bit PINC_7           = PINC.7
.................... #bit PINC_6           = PINC.6
.................... #bit PINC_5           = PINC.5
.................... #bit PINC_4           = PINC.4
.................... #bit PINC_3           = PINC.3
.................... #bit PINC_2           = PINC.2
.................... #bit PINC_1           = PINC.1
.................... #bit PINC_0           = PINC.0
.................... #bit DDRC_0           = DDRC.0
.................... #bit DDRC_1           = DDRC.1
.................... #bit DDRC_2           = DDRC.2
.................... #bit DDRC_3           = DDRC.3
.................... #bit DDRC_4           = DDRC.4
.................... #bit DDRC_5           = DDRC.5
.................... #bit DDRC_6           = DDRC.6
.................... #bit DDRC_7           = DDRC.7
.................... /*********************PORTD**********************/
.................... #bit PORTD_7          = PORTD.7
.................... #bit PORTD_6          = PORTD.6
.................... #bit PORTD_5          = PORTD.5
.................... #bit PORTD_4          = PORTD.4
.................... #bit PORTD_3          = PORTD.3
.................... #bit PORTD_2          = PORTD.2
.................... #bit PORTD_1          = PORTD.1
.................... #bit PORTD_0          = PORTD.0
.................... #bit PIND_7           = PIND.7
.................... #bit PIND_6           = PIND.6
.................... #bit PIND_5           = PIND.5
.................... #bit PIND_4           = PIND.4
.................... #bit PIND_3           = PIND.3
.................... #bit PIND_2           = PIND.2
.................... #bit PIND_1           = PIND.1
.................... #bit PIND_0           = PIND.0
.................... #bit DDRD_0           = DDRD.0
.................... #bit DDRD_1           = DDRD.1
.................... #bit DDRD_2           = DDRD.2
.................... #bit DDRD_3           = DDRD.3
.................... #bit DDRD_4           = DDRD.4
.................... #bit DDRD_5           = DDRD.5
.................... #bit DDRD_6           = DDRD.6
.................... #bit DDRD_7           = DDRD.7
.................... /*********************PORTE**********************/
.................... #bit PORTE_2          = PORTE.2
.................... #bit PORTE_1          = PORTE.1
.................... #bit PORTE_0          = PORTE.0
.................... #bit PINE_2           = PINE.2
.................... #bit PINE_1           = PINE.1
.................... #bit PINE_0           = PINE.0
.................... #bit DDRE_0           = DDRE.0
.................... #bit DDRE_1           = DDRE.1
.................... #bit DDRE_2           = DDRE.2
.................... #ifndef DDR_OUT
....................     #define DDR_OUT     0
.................... #endif
.................... #ifndef DDR_IN
....................     #define DDR_IN      1
.................... #endif
.................... #endif
.................... /******************************KET THUC FILE******************************
.................... ______________________________NGUYEN QUY NHAT______________________________*/
.................... 
.................... 
.................... #device ADC=10
.................... #use delay(crystal=20000000)
*
0036:  MOVLW  37
0037:  MOVWF  04
0038:  BCF    03.7
0039:  MOVF   00,W
003A:  BTFSC  03.2
003B:  GOTO   049
003C:  MOVLW  06
003D:  MOVWF  78
003E:  CLRF   77
003F:  DECFSZ 77,F
0040:  GOTO   03F
0041:  DECFSZ 78,F
0042:  GOTO   03E
0043:  MOVLW  7B
0044:  MOVWF  77
0045:  DECFSZ 77,F
0046:  GOTO   045
0047:  DECFSZ 00,F
0048:  GOTO   03C
0049:  RETURN
.................... #fuses NOWDT, HS, NOLVP, NOPUT, NOPROTECT, NODEBUG, NOBROWNOUT, NOCPD, NOWRT
.................... 
.................... 
.................... 
.................... unsigned int8 seg7ledca[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};//7 segment led code common anode
*
0104:  MOVLW  C0
0105:  BCF    03.5
0106:  MOVWF  27
0107:  MOVLW  F9
0108:  MOVWF  28
0109:  MOVLW  A4
010A:  MOVWF  29
010B:  MOVLW  B0
010C:  MOVWF  2A
010D:  MOVLW  99
010E:  MOVWF  2B
010F:  MOVLW  92
0110:  MOVWF  2C
0111:  MOVLW  82
0112:  MOVWF  2D
0113:  MOVLW  F8
0114:  MOVWF  2E
0115:  MOVLW  80
0116:  MOVWF  2F
0117:  MOVLW  90
0118:  MOVWF  30
.................... 
.................... unsigned int8 n = 0;
.................... 
.................... //=========================declare function====================================
.................... void init_pin(void)
.................... {
.................... // set up port
....................    DDRA_0 = 1;//button on/off sensor
*
008D:  BSF    03.5
008E:  BSF    05.0
....................    DDRA_1 = 1;//button on/off light
008F:  BSF    05.1
....................    DDRA_2 = 1;//button reset count
0090:  BSF    05.2
....................    DDRB_0 = 1;//input sensor
0091:  BSF    06.0
....................    DDRB_1 = 0;//signal led green
0092:  BCF    06.1
....................    DDRB_2 = 0;//signal led yellow
0093:  BCF    06.2
....................    DDRB_3 = 0;//signal led red
0094:  BCF    06.3
....................    DDRB_4 = 0;//light
0095:  BCF    06.4
....................    DDRB_5 = 0;//signal sensor led
0096:  BCF    06.5
....................    DDRC = 0x00;//7 segment led dozens
0097:  CLRF   07
....................    DDRD = 0x00;//7 segment led units
0098:  CLRF   08
0099:  BCF    03.5
009A:  BCF    0A.3
009B:  BCF    0A.4
009C:  GOTO   11A (RETURN)
.................... }
.................... 
.................... void init_int_ext(void);//init interrupt external
.................... 
.................... void status_on_off(unsigned int8 n);//notification status
.................... 
.................... void display_on_seg7led(unsigned int8 n);//export 7 segment led
.................... 
.................... void init_int_timer0(void);//init interrupt timer 0
.................... 
.................... //=====================declare interrupt program===============================
.................... #INT_EXT
.................... void _int_ext(void)
.................... {
....................    PORTB_4 = 1;
*
004A:  BSF    06.4
....................    delay_ms(1000);
004B:  MOVLW  04
004C:  MOVWF  36
004D:  MOVLW  FA
004E:  MOVWF  37
004F:  CALL   036
0050:  DECFSZ 36,F
0051:  GOTO   04D
....................    PORTB_4 = 0;
0052:  BCF    06.4
....................    n++;
0053:  INCF   31,F
.................... }
.................... 
0054:  BCF    0B.1
0055:  BCF    0A.3
0056:  BCF    0A.4
0057:  GOTO   01F
.................... #INT_TIMER0
.................... void _int_timer0(void)
.................... {
....................    if(PORTA_0)
0058:  BTFSS  05.0
0059:  GOTO   069
....................    {
....................       //on/off sensor
....................       delay_ms(20);
005A:  MOVLW  14
005B:  MOVWF  37
005C:  CALL   036
....................       if(PORTA_0)
005D:  BTFSS  05.0
005E:  GOTO   069
....................       {
....................          DDRB_0 = !DDRB_0;
005F:  MOVLW  01
0060:  BSF    03.5
0061:  XORWF  06,F
....................          while(PORTA_0);
0062:  BCF    03.5
0063:  BTFSC  05.0
0064:  GOTO   063
....................          if(PORTB_4)
0065:  BTFSS  06.4
0066:  GOTO   069
....................          {
....................             PORTB_4 = 0;
0067:  BCF    06.4
....................             n++;
0068:  INCF   31,F
....................          }
....................       }     
....................    }
....................    if(DDRB_0 == 0)
0069:  BSF    03.5
006A:  BTFSC  06.0
006B:  GOTO   07B
....................    {
....................       if(PORTA_1)
006C:  BCF    03.5
006D:  BTFSS  05.1
006E:  GOTO   07A
....................       {
....................          //on/off light when sensor off
....................          delay_ms(20);
006F:  MOVLW  14
0070:  MOVWF  37
0071:  CALL   036
....................          if(PORTA_1)
0072:  BTFSS  05.1
0073:  GOTO   07A
....................          {
....................             PORTB_4 = !PORTB_4;
0074:  MOVLW  10
0075:  XORWF  06,F
....................             if(!PORTB_4)
0076:  BTFSS  06.4
....................             {
....................                n++;
0077:  INCF   31,F
....................             }
....................             while(PORTA_1);
0078:  BTFSC  05.1
0079:  GOTO   078
007A:  BSF    03.5
....................          }   
....................       }
....................    }
....................    if(PORTA_2)
007B:  BCF    03.5
007C:  BTFSS  05.2
007D:  GOTO   087
....................    {
....................       //reset counter on/off light
....................       delay_ms(20);
007E:  MOVLW  14
007F:  MOVWF  37
0080:  CALL   036
....................       if(PORTA_2)
0081:  BTFSS  05.2
0082:  GOTO   087
....................       {
....................          n = 0;
0083:  CLRF   31
....................          PORTB_4 = 0;
0084:  BCF    06.4
....................          while(PORTA_2);
0085:  BTFSC  05.2
0086:  GOTO   085
....................       }
....................       
....................    }
....................    set_timer0(231);
0087:  MOVLW  E7
0088:  MOVWF  01
0089:  BCF    0B.2
008A:  BCF    0A.3
008B:  BCF    0A.4
008C:  GOTO   01F
.................... }
.................... 
.................... //===========================main program======================================
.................... void main()
*
00F8:  MOVF   03,W
00F9:  ANDLW  1F
00FA:  MOVWF  03
00FB:  CLRF   31
00FC:  BSF    03.5
00FD:  BSF    1F.0
00FE:  BSF    1F.1
00FF:  BSF    1F.2
0100:  BCF    1F.3
0101:  MOVLW  07
0102:  MOVWF  1C
0103:  BCF    03.7
.................... {
....................    init_pin();
*
0119:  GOTO   08D
....................    init_int_ext();
011A:  GOTO   09D
....................    init_int_timer0();
011B:  GOTO   0A6
....................    
....................    while(TRUE)
....................    {
....................       status_on_off(n);
011C:  MOVF   31,W
011D:  MOVWF  32
011E:  GOTO   0B4
....................       display_on_seg7led(n);
011F:  MOVF   31,W
0120:  MOVWF  32
0121:  GOTO   0DF
....................       if(DDRB_0)
0122:  BSF    03.5
0123:  BTFSS  06.0
0124:  GOTO   129
....................       {
....................          PORTB_5 = 1;//sensor on
0125:  BCF    03.5
0126:  BSF    06.5
....................       }
0127:  GOTO   12B
0128:  BSF    03.5
....................       else
....................       {
....................          PORTB_5 = 0;//sensor off
0129:  BCF    03.5
012A:  BCF    06.5
....................       }
012B:  GOTO   11C
....................    }
.................... }
.................... 
012C:  SLEEP
.................... //==================================function===================================
.................... void init_int_ext(void)
.................... {
....................    //interrupt at RB0
....................    ext_int_edge(L_TO_H);
*
009D:  BSF    03.5
009E:  BSF    01.6
....................    enable_interrupts(INT_EXT);
009F:  BCF    03.5
00A0:  BSF    0B.4
....................    enable_interrupts(GLOBAL);
00A1:  MOVLW  C0
00A2:  IORWF  0B,F
00A3:  BCF    0A.3
00A4:  BCF    0A.4
00A5:  GOTO   11B (RETURN)
.................... }
.................... 
.................... void init_int_timer0(void)
.................... {
....................    //interrupt timer 0
....................    setup_timer_0(T0_INTERNAL|T0_DIV_1);
00A6:  BSF    03.5
00A7:  MOVF   01,W
00A8:  ANDLW  C7
00A9:  IORLW  08
00AA:  MOVWF  01
....................    set_timer0(231);
00AB:  MOVLW  E7
00AC:  BCF    03.5
00AD:  MOVWF  01
....................    enable_interrupts(INT_TIMER0);
00AE:  BSF    0B.5
....................    enable_interrupts(GLOBAL);
00AF:  MOVLW  C0
00B0:  IORWF  0B,F
00B1:  BCF    0A.3
00B2:  BCF    0A.4
00B3:  GOTO   11C (RETURN)
.................... }
.................... 
.................... void status_on_off(unsigned int8 n)
.................... {
....................    if(n < 10)
00B4:  MOVF   32,W
00B5:  SUBLW  09
00B6:  BTFSS  03.0
00B7:  GOTO   0BC
....................    {
....................       //green led
....................       PORTB_1 = 1;
00B8:  BSF    06.1
....................       PORTB_2 = 0;
00B9:  BCF    06.2
....................       PORTB_3 = 0;
00BA:  BCF    06.3
....................    }
00BB:  GOTO   0C7
....................    else if(n < 20)
00BC:  MOVF   32,W
00BD:  SUBLW  13
00BE:  BTFSS  03.0
00BF:  GOTO   0C4
....................    {
....................       //yellow led
....................       PORTB_1 = 0;
00C0:  BCF    06.1
....................       PORTB_2 = 1;
00C1:  BSF    06.2
....................       PORTB_3 = 0;
00C2:  BCF    06.3
....................    }
00C3:  GOTO   0C7
....................    else
....................    {
....................       //red led
....................       PORTB_1 = 0;
00C4:  BCF    06.1
....................       PORTB_2 = 0;
00C5:  BCF    06.2
....................       PORTB_3 = 1;
00C6:  BSF    06.3
....................    }
00C7:  BCF    0A.3
00C8:  BCF    0A.4
00C9:  GOTO   11F (RETURN)
.................... }
.................... 
.................... void display_on_seg7led(unsigned int8 n)
.................... {
....................    PORTC = seg7ledca[n/10];//7 segment led dozens
*
00DF:  MOVF   32,W
00E0:  MOVWF  33
00E1:  MOVLW  0A
00E2:  MOVWF  34
00E3:  CALL   0CA
00E4:  MOVLW  27
00E5:  ADDWF  78,W
00E6:  MOVWF  04
00E7:  BCF    03.7
00E8:  MOVF   00,W
00E9:  MOVWF  07
....................    PORTD = seg7ledca[n%10];//7 segment led units
00EA:  MOVF   32,W
00EB:  MOVWF  33
00EC:  MOVLW  0A
00ED:  MOVWF  34
00EE:  CALL   0CA
00EF:  MOVLW  27
00F0:  ADDWF  77,W
00F1:  MOVWF  04
00F2:  BCF    03.7
00F3:  MOVF   00,W
00F4:  MOVWF  08
00F5:  BCF    0A.3
00F6:  BCF    0A.4
00F7:  GOTO   122 (RETURN)
.................... }

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
